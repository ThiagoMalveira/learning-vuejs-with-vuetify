{"remainingRequest":"/home/thiago/www/Pessoais/vueTest/node_modules/babel-loader/lib/index.js!/home/thiago/www/Pessoais/vueTest/node_modules/vuetify/lib/components/VCombobox/VCombobox.js","dependencies":[{"path":"/home/thiago/www/Pessoais/vueTest/node_modules/vuetify/lib/components/VCombobox/VCombobox.js","mtime":499162500000},{"path":"/home/thiago/www/Pessoais/vueTest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/thiago/www/Pessoais/vueTest/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _typeof from \"/home/thiago/www/Pessoais/vueTest/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport _defineProperty from \"/home/thiago/www/Pessoais/vueTest/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.string.ends-with\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.regexp.to-string\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Styles\nimport \"../../../src/components/VAutocomplete/VAutocomplete.sass\"; // Extensions\n\nimport VSelect from \"../VSelect/VSelect\";\nimport VAutocomplete from \"../VAutocomplete/VAutocomplete\"; // Utils\n\nimport { keyCodes } from \"../../util/helpers\";\n/* @vue/component */\n\nexport default VAutocomplete.extend({\n  name: 'v-combobox',\n  props: {\n    delimiters: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    returnObject: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data: function data() {\n    return {\n      editingIndex: -1\n    };\n  },\n  computed: {\n    computedCounterValue: function computedCounterValue() {\n      return this.multiple ? this.selectedItems.length : (this.internalSearch || '').toString().length;\n    },\n    hasSlot: function hasSlot() {\n      return VSelect.options.computed.hasSlot.call(this) || this.multiple;\n    },\n    isAnyValueAllowed: function isAnyValueAllowed() {\n      return true;\n    },\n    menuCanShow: function menuCanShow() {\n      if (!this.isFocused) return false;\n      return this.hasDisplayedItems || !!this.$slots['no-data'] && !this.hideNoData;\n    },\n    searchIsDirty: function searchIsDirty() {\n      return this.internalSearch != null;\n    }\n  },\n  methods: {\n    onInternalSearchChanged: function onInternalSearchChanged(val) {\n      if (val && this.multiple && this.delimiters.length) {\n        var delimiter = this.delimiters.find(function (d) {\n          return val.endsWith(d);\n        });\n\n        if (delimiter != null) {\n          this.internalSearch = val.slice(0, val.length - delimiter.length);\n          this.updateTags();\n        }\n      }\n\n      this.updateMenuDimensions();\n    },\n    genInput: function genInput() {\n      var input = VAutocomplete.options.methods.genInput.call(this);\n      delete input.data.attrs.name;\n      input.data.on.paste = this.onPaste;\n      return input;\n    },\n    genChipSelection: function genChipSelection(item, index) {\n      var _this = this;\n\n      var chip = VSelect.options.methods.genChipSelection.call(this, item, index); // Allow user to update an existing value\n\n      if (this.multiple) {\n        chip.componentOptions.listeners = _objectSpread(_objectSpread({}, chip.componentOptions.listeners), {}, {\n          dblclick: function dblclick() {\n            _this.editingIndex = index;\n            _this.internalSearch = _this.getText(item);\n            _this.selectedIndex = -1;\n          }\n        });\n      }\n\n      return chip;\n    },\n    onChipInput: function onChipInput(item) {\n      VSelect.options.methods.onChipInput.call(this, item);\n      this.editingIndex = -1;\n    },\n    // Requires a manual definition\n    // to overwrite removal in v-autocomplete\n    onEnterDown: function onEnterDown(e) {\n      e.preventDefault(); // If has menu index, let v-select-list handle\n\n      if (this.getMenuIndex() > -1) return;\n      this.$nextTick(this.updateSelf);\n    },\n    onFilteredItemsChanged: function onFilteredItemsChanged(val, oldVal) {\n      if (!this.autoSelectFirst) return;\n      VAutocomplete.options.methods.onFilteredItemsChanged.call(this, val, oldVal);\n    },\n    onKeyDown: function onKeyDown(e) {\n      var keyCode = e.keyCode;\n\n      if (e.ctrlKey || ![keyCodes.home, keyCodes.end].includes(keyCode)) {\n        VSelect.options.methods.onKeyDown.call(this, e);\n      } // If user is at selection index of 0\n      // create a new tag\n\n\n      if (this.multiple && keyCode === keyCodes.left && this.$refs.input.selectionStart === 0) {\n        this.updateSelf();\n      } else if (keyCode === keyCodes.enter) {\n        this.onEnterDown(e);\n      } // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n\n\n      this.changeSelectedIndex(keyCode);\n    },\n    onTabDown: function onTabDown(e) {\n      // When adding tags, if searching and\n      // there is not a filtered options,\n      // add the value to the tags list\n      if (this.multiple && this.internalSearch && this.getMenuIndex() === -1) {\n        e.preventDefault();\n        e.stopPropagation();\n        return this.updateTags();\n      }\n\n      VAutocomplete.options.methods.onTabDown.call(this, e);\n    },\n    selectItem: function selectItem(item) {\n      // Currently only supports items:<string[]>\n      if (this.editingIndex > -1) {\n        this.updateEditing();\n      } else {\n        VAutocomplete.options.methods.selectItem.call(this, item); // if selected item contains search value,\n        // remove the search string\n\n        if (this.internalSearch && this.multiple && this.getText(item).toLocaleLowerCase().includes(this.internalSearch.toLocaleLowerCase())) {\n          this.internalSearch = null;\n        }\n      }\n    },\n    setSelectedItems: function setSelectedItems() {\n      if (this.internalValue == null || this.internalValue === '') {\n        this.selectedItems = [];\n      } else {\n        this.selectedItems = this.multiple ? this.internalValue : [this.internalValue];\n      }\n    },\n    setValue: function setValue(value) {\n      VSelect.options.methods.setValue.call(this, value != null ? value : this.internalSearch);\n    },\n    updateEditing: function updateEditing() {\n      var _this2 = this;\n\n      var value = this.internalValue.slice();\n      var index = this.selectedItems.findIndex(function (item) {\n        return _this2.getText(item) === _this2.internalSearch;\n      }); // If user enters a duplicate text on chip edit,\n      // don't add it, move it to the end of the list\n\n      if (index > -1) {\n        var item = _typeof(value[index]) === 'object' ? Object.assign({}, value[index]) : value[index];\n        value.splice(index, 1);\n        value.push(item);\n      } else {\n        value[this.editingIndex] = this.internalSearch;\n      }\n\n      this.setValue(value);\n      this.editingIndex = -1;\n      this.internalSearch = null;\n    },\n    updateCombobox: function updateCombobox() {\n      // If search is not dirty, do nothing\n      if (!this.searchIsDirty) return; // The internal search is not matching\n      // the internal value, update the input\n\n      if (this.internalSearch !== this.getText(this.internalValue)) this.setValue(); // Reset search if using slot to avoid a double input\n\n      var isUsingSlot = Boolean(this.$scopedSlots.selection) || this.hasChips;\n      if (isUsingSlot) this.internalSearch = null;\n    },\n    updateSelf: function updateSelf() {\n      this.multiple ? this.updateTags() : this.updateCombobox();\n    },\n    updateTags: function updateTags() {\n      var _this3 = this;\n\n      var menuIndex = this.getMenuIndex(); // If the user is not searching\n      // and no menu item is selected\n      // or if the search is empty\n      // do nothing\n\n      if (menuIndex < 0 && !this.searchIsDirty || !this.internalSearch) return;\n\n      if (this.editingIndex > -1) {\n        return this.updateEditing();\n      }\n\n      var index = this.selectedItems.findIndex(function (item) {\n        return _this3.internalSearch === _this3.getText(item);\n      }); // If the duplicate item is an object,\n      // copy it, so that it can be added again later\n\n      var itemToSelect = index > -1 && _typeof(this.selectedItems[index]) === 'object' ? Object.assign({}, this.selectedItems[index]) : this.internalSearch; // If it already exists, do nothing\n      // this might need to change to bring\n      // the duplicated item to the last entered\n\n      if (index > -1) {\n        var internalValue = this.internalValue.slice();\n        internalValue.splice(index, 1);\n        this.setValue(internalValue);\n      } // If menu index is greater than 1\n      // the selection is handled elsewhere\n      // TODO: find out where\n\n\n      if (menuIndex > -1) return this.internalSearch = null;\n      this.selectItem(itemToSelect);\n      this.internalSearch = null;\n    },\n    onPaste: function onPaste(event) {\n      var _event$clipboardData;\n\n      if (!this.multiple || this.searchIsDirty) return;\n      var pastedItemText = (_event$clipboardData = event.clipboardData) == null ? void 0 : _event$clipboardData.getData('text/vnd.vuetify.autocomplete.item+plain');\n\n      if (pastedItemText && this.findExistingIndex(pastedItemText) === -1) {\n        event.preventDefault();\n        VSelect.options.methods.selectItem.call(this, pastedItemText);\n      }\n    },\n    clearableCallback: function clearableCallback() {\n      this.editingIndex = -1;\n      VAutocomplete.options.methods.clearableCallback.call(this);\n    }\n  }\n});",{"version":3,"sources":["../../../src/components/VCombobox/VCombobox.ts"],"names":[],"mappings":"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","sourcesContent":["// Styles\nimport '../VAutocomplete/VAutocomplete.sass'\n\n// Extensions\nimport VSelect from '../VSelect/VSelect'\nimport VAutocomplete from '../VAutocomplete/VAutocomplete'\n\n// Utils\nimport { keyCodes } from '../../util/helpers'\n\n// Types\nimport { PropValidator } from 'vue/types/options'\n\n/* @vue/component */\nexport default VAutocomplete.extend({\n  name: 'v-combobox',\n\n  props: {\n    delimiters: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<string[]>,\n    returnObject: {\n      type: Boolean,\n      default: true,\n    },\n  },\n\n  data: () => ({\n    editingIndex: -1,\n  }),\n\n  computed: {\n    computedCounterValue (): number {\n      return this.multiple\n        ? this.selectedItems.length\n        : (this.internalSearch || '').toString().length\n    },\n    hasSlot (): boolean {\n      return VSelect.options.computed.hasSlot.call(this) || this.multiple\n    },\n    isAnyValueAllowed (): boolean {\n      return true\n    },\n    menuCanShow (): boolean {\n      if (!this.isFocused) return false\n\n      return this.hasDisplayedItems ||\n        (!!this.$slots['no-data'] && !this.hideNoData)\n    },\n    searchIsDirty (): boolean {\n      return this.internalSearch != null\n    },\n  },\n\n  methods: {\n    onInternalSearchChanged (val: any) {\n      if (\n        val &&\n        this.multiple &&\n        this.delimiters.length\n      ) {\n        const delimiter = this.delimiters.find(d => val.endsWith(d))\n        if (delimiter != null) {\n          this.internalSearch = val.slice(0, val.length - delimiter.length)\n          this.updateTags()\n        }\n      }\n\n      this.updateMenuDimensions()\n    },\n    genInput () {\n      const input = VAutocomplete.options.methods.genInput.call(this)\n\n      delete input.data!.attrs!.name\n      input.data!.on!.paste = this.onPaste\n\n      return input\n    },\n    genChipSelection (item: object, index: number) {\n      const chip = VSelect.options.methods.genChipSelection.call(this, item, index)\n\n      // Allow user to update an existing value\n      if (this.multiple) {\n        chip.componentOptions!.listeners! = {\n          ...chip.componentOptions!.listeners!,\n          dblclick: () => {\n            this.editingIndex = index\n            this.internalSearch = this.getText(item)\n            this.selectedIndex = -1\n          },\n        }\n      }\n\n      return chip\n    },\n    onChipInput (item: object) {\n      VSelect.options.methods.onChipInput.call(this, item)\n\n      this.editingIndex = -1\n    },\n    // Requires a manual definition\n    // to overwrite removal in v-autocomplete\n    onEnterDown (e: Event) {\n      e.preventDefault()\n      // If has menu index, let v-select-list handle\n      if (this.getMenuIndex() > -1) return\n\n      this.$nextTick(this.updateSelf)\n    },\n    onFilteredItemsChanged (val: never[], oldVal: never[]) {\n      if (!this.autoSelectFirst) return\n\n      VAutocomplete.options.methods.onFilteredItemsChanged.call(this, val, oldVal)\n    },\n    onKeyDown (e: KeyboardEvent) {\n      const keyCode = e.keyCode\n\n      if (\n        e.ctrlKey ||\n        ![keyCodes.home, keyCodes.end].includes(keyCode)\n      ) {\n        VSelect.options.methods.onKeyDown.call(this, e)\n      }\n\n      // If user is at selection index of 0\n      // create a new tag\n      if (this.multiple &&\n        keyCode === keyCodes.left &&\n        this.$refs.input.selectionStart === 0\n      ) {\n        this.updateSelf()\n      } else if (keyCode === keyCodes.enter) {\n        this.onEnterDown(e)\n      }\n\n      // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n      this.changeSelectedIndex(keyCode)\n    },\n    onTabDown (e: KeyboardEvent) {\n      // When adding tags, if searching and\n      // there is not a filtered options,\n      // add the value to the tags list\n      if (this.multiple &&\n        this.internalSearch &&\n        this.getMenuIndex() === -1\n      ) {\n        e.preventDefault()\n        e.stopPropagation()\n\n        return this.updateTags()\n      }\n\n      VAutocomplete.options.methods.onTabDown.call(this, e)\n    },\n    selectItem (item: object) {\n      // Currently only supports items:<string[]>\n      if (this.editingIndex > -1) {\n        this.updateEditing()\n      } else {\n        VAutocomplete.options.methods.selectItem.call(this, item)\n\n        // if selected item contains search value,\n        // remove the search string\n        if (\n          this.internalSearch &&\n          this.multiple &&\n          this.getText(item).toLocaleLowerCase().includes(this.internalSearch.toLocaleLowerCase())\n        ) {\n          this.internalSearch = null\n        }\n      }\n    },\n    setSelectedItems () {\n      if (this.internalValue == null ||\n        this.internalValue === ''\n      ) {\n        this.selectedItems = []\n      } else {\n        this.selectedItems = this.multiple ? this.internalValue : [this.internalValue]\n      }\n    },\n    setValue (value?: any) {\n      VSelect.options.methods.setValue.call(this, value ?? this.internalSearch)\n    },\n    updateEditing () {\n      const value = this.internalValue.slice()\n      const index = this.selectedItems.findIndex(item =>\n        this.getText(item) === this.internalSearch)\n\n      // If user enters a duplicate text on chip edit,\n      // don't add it, move it to the end of the list\n      if (index > -1) {\n        const item = typeof value[index] === 'object'\n          ? Object.assign({}, value[index])\n          : value[index]\n\n        value.splice(index, 1)\n        value.push(item)\n      } else {\n        value[this.editingIndex] = this.internalSearch\n      }\n\n      this.setValue(value)\n      this.editingIndex = -1\n      this.internalSearch = null\n    },\n    updateCombobox () {\n      // If search is not dirty, do nothing\n      if (!this.searchIsDirty) return\n\n      // The internal search is not matching\n      // the internal value, update the input\n      if (this.internalSearch !== this.getText(this.internalValue)) this.setValue()\n\n      // Reset search if using slot to avoid a double input\n      const isUsingSlot = Boolean(this.$scopedSlots.selection) || this.hasChips\n      if (isUsingSlot) this.internalSearch = null\n    },\n    updateSelf () {\n      this.multiple ? this.updateTags() : this.updateCombobox()\n    },\n    updateTags () {\n      const menuIndex = this.getMenuIndex()\n\n      // If the user is not searching\n      // and no menu item is selected\n      // or if the search is empty\n      // do nothing\n      if ((menuIndex < 0 && !this.searchIsDirty) ||\n          !this.internalSearch) return\n\n      if (this.editingIndex > -1) {\n        return this.updateEditing()\n      }\n\n      const index = this.selectedItems.findIndex(item =>\n        this.internalSearch === this.getText(item))\n\n      // If the duplicate item is an object,\n      // copy it, so that it can be added again later\n      const itemToSelect = index > -1 && typeof this.selectedItems[index] === 'object'\n        ? Object.assign({}, this.selectedItems[index])\n        : this.internalSearch\n\n      // If it already exists, do nothing\n      // this might need to change to bring\n      // the duplicated item to the last entered\n      if (index > -1) {\n        const internalValue = this.internalValue.slice()\n        internalValue.splice(index, 1)\n\n        this.setValue(internalValue)\n      }\n\n      // If menu index is greater than 1\n      // the selection is handled elsewhere\n      // TODO: find out where\n      if (menuIndex > -1) return (this.internalSearch = null)\n\n      this.selectItem(itemToSelect)\n\n      this.internalSearch = null\n    },\n    onPaste (event: ClipboardEvent) {\n      if (!this.multiple || this.searchIsDirty) return\n\n      const pastedItemText = event.clipboardData?.getData('text/vnd.vuetify.autocomplete.item+plain')\n      if (pastedItemText && this.findExistingIndex(pastedItemText as any) === -1) {\n        event.preventDefault()\n        VSelect.options.methods.selectItem.call(this, pastedItemText as any)\n      }\n    },\n    clearableCallback () {\n      this.editingIndex = -1\n\n      VAutocomplete.options.methods.clearableCallback.call(this)\n    },\n  },\n})\n"],"sourceRoot":""}]}