{"remainingRequest":"/home/thiago/www/Pessoais/vueTest/node_modules/babel-loader/lib/index.js!/home/thiago/www/Pessoais/vueTest/node_modules/vuetify/lib/components/VExpansionPanel/VExpansionPanelContent.js","dependencies":[{"path":"/home/thiago/www/Pessoais/vueTest/node_modules/vuetify/lib/components/VExpansionPanel/VExpansionPanelContent.js","mtime":499162500000},{"path":"/home/thiago/www/Pessoais/vueTest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/thiago/www/Pessoais/vueTest/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":["import { VExpandTransition } from \"../transitions\"; // Mixins\n\nimport Bootable from \"../../mixins/bootable\";\nimport Colorable from \"../../mixins/colorable\";\nimport { inject as RegistrableInject } from \"../../mixins/registrable\"; // Utilities\n\nimport { getSlot } from \"../../util/helpers\";\nimport mixins from \"../../util/mixins\";\nvar baseMixins = mixins(Bootable, Colorable, RegistrableInject('expansionPanel', 'v-expansion-panel-content', 'v-expansion-panel'));\n/* @vue/component */\n\nexport default baseMixins.extend().extend({\n  name: 'v-expansion-panel-content',\n  data: function data() {\n    return {\n      isActive: false\n    };\n  },\n  computed: {\n    parentIsActive: function parentIsActive() {\n      return this.expansionPanel.isActive;\n    }\n  },\n  watch: {\n    parentIsActive: {\n      immediate: true,\n      handler: function handler(val, oldVal) {\n        var _this = this;\n\n        if (val) this.isBooted = true;\n        if (oldVal == null) this.isActive = val;else this.$nextTick(function () {\n          return _this.isActive = val;\n        });\n      }\n    }\n  },\n  created: function created() {\n    this.expansionPanel.registerContent(this);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.expansionPanel.unregisterContent();\n  },\n  render: function render(h) {\n    var _this2 = this;\n\n    return h(VExpandTransition, this.showLazyContent(function () {\n      return [h('div', _this2.setBackgroundColor(_this2.color, {\n        staticClass: 'v-expansion-panel-content',\n        directives: [{\n          name: 'show',\n          value: _this2.isActive\n        }]\n      }), [h('div', {\n        class: 'v-expansion-panel-content__wrap'\n      }, getSlot(_this2))])];\n    }));\n  }\n});",{"version":3,"sources":["../../../src/components/VExpansionPanel/VExpansionPanelContent.ts"],"names":[],"mappings":"AAEA,SAAA,iBAAA,yB,CAEA;;AACA,OAAA,QAAA;AACA,OAAA,SAAA;AACA,SAAS,MAAM,IAAf,iBAAA,mC,CAEA;;AACA,SAAA,OAAA;AACA,OAAA,MAAA;AAKA,IAAM,UAAU,GAAG,MAAM,CAAA,QAAA,EAAA,SAAA,EAGvB,iBAAiB,CAAA,gBAAA,EAAA,2BAAA,EAHnB,mBAGmB,CAHM,CAAzB;AAUA;;AACA,eAAe,UAAU,CAAV,MAAA,GAAA,MAAA,CAAoC;AACjD,EAAA,IAAI,EAD6C,2BAAA;AAGjD,EAAA,IAAI,EAAE;AAAA,WAAO;AACX,MAAA,QAAQ,EAAE;AADC,KAAP;AAAA,GAH2C;AAOjD,EAAA,QAAQ,EAAE;AACR,IAAA,cADQ,4BACM;AACZ,aAAO,KAAA,cAAA,CAAP,QAAA;AACD;AAHO,GAPuC;AAajD,EAAA,KAAK,EAAE;AACL,IAAA,cAAc,EAAE;AACd,MAAA,SAAS,EADK,IAAA;AAEd,MAAA,OAFc,mBAEP,GAFO,EAEP,MAFO,EAEM;AAAA;;AAClB,YAAA,GAAA,EAAS,KAAA,QAAA,GAAA,IAAA;AAET,YAAI,MAAM,IAAV,IAAA,EAAoB,KAAA,QAAA,GAApB,GAAoB,CAApB,KACK,KAAA,SAAA,CAAe;AAAA,iBAAM,KAAA,CAAA,QAAA,GAArB,GAAe;AAAA,SAAf;AACN;AAPa;AADX,GAb0C;AAyBjD,EAAA,OAzBiD,qBAyB1C;AACL,SAAA,cAAA,CAAA,eAAA,CAAA,IAAA;AA1B+C,GAAA;AA6BjD,EAAA,aA7BiD,2BA6BpC;AACX,SAAA,cAAA,CAAA,iBAAA;AA9B+C,GAAA;AAiCjD,EAAA,MAjCiD,kBAiC3C,CAjC2C,EAiCxC;AAAA;;AACP,WAAO,CAAC,CAAA,iBAAA,EAAoB,KAAA,eAAA,CAAqB;AAAA,aAAM,CACrD,CAAC,CAAA,KAAA,EAAQ,MAAA,CAAA,kBAAA,CAAwB,MAAA,CAAxB,KAAA,EAAoC;AAC3C,QAAA,WAAW,EADgC,2BAAA;AAE3C,QAAA,UAAU,EAAE,CAAC;AACX,UAAA,IAAI,EADO,MAAA;AAEX,UAAA,KAAK,EAAE,MAAA,CAAK;AAFD,SAAD;AAF+B,OAApC,CAAR,EAMG,CACF,CAAC,CAAA,KAAA,EAAQ;AAAE,QAAA,KAAK,EAAE;AAAT,OAAR,EAAsD,OAAO,CARlE,MAQkE,CAA7D,CADC,CANH,CADoD,CAAN;AAAA,KAArB,CAApB,CAAR;AAWD;AA7CgD,CAApC,CAAf","sourcesContent":["// Components\nimport VExpansionPanel from './VExpansionPanel'\nimport { VExpandTransition } from '../transitions'\n\n// Mixins\nimport Bootable from '../../mixins/bootable'\nimport Colorable from '../../mixins/colorable'\nimport { inject as RegistrableInject } from '../../mixins/registrable'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\nimport mixins, { ExtractVue } from '../../util/mixins'\n\n// Types\nimport Vue, { VNode, VueConstructor } from 'vue'\n\nconst baseMixins = mixins(\n  Bootable,\n  Colorable,\n  RegistrableInject<'expansionPanel', VueConstructor<Vue>>('expansionPanel', 'v-expansion-panel-content', 'v-expansion-panel')\n)\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  expansionPanel: InstanceType<typeof VExpansionPanel>\n}\n\n/* @vue/component */\nexport default baseMixins.extend<options>().extend({\n  name: 'v-expansion-panel-content',\n\n  data: () => ({\n    isActive: false,\n  }),\n\n  computed: {\n    parentIsActive (): boolean {\n      return this.expansionPanel.isActive\n    },\n  },\n\n  watch: {\n    parentIsActive: {\n      immediate: true,\n      handler (val, oldVal) {\n        if (val) this.isBooted = true\n\n        if (oldVal == null) this.isActive = val\n        else this.$nextTick(() => this.isActive = val)\n      },\n    },\n  },\n\n  created () {\n    this.expansionPanel.registerContent(this)\n  },\n\n  beforeDestroy () {\n    this.expansionPanel.unregisterContent()\n  },\n\n  render (h): VNode {\n    return h(VExpandTransition, this.showLazyContent(() => [\n      h('div', this.setBackgroundColor(this.color, {\n        staticClass: 'v-expansion-panel-content',\n        directives: [{\n          name: 'show',\n          value: this.isActive,\n        }],\n      }), [\n        h('div', { class: 'v-expansion-panel-content__wrap' }, getSlot(this)),\n      ]),\n    ]))\n  },\n})\n"],"sourceRoot":""}]}