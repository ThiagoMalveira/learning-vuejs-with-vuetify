{"remainingRequest":"/home/thiago/www/Pessoais/vueTest/node_modules/babel-loader/lib/index.js!/home/thiago/www/Pessoais/vueTest/node_modules/vuetify/lib/components/VCalendar/util/parser.js","dependencies":[{"path":"/home/thiago/www/Pessoais/vueTest/node_modules/vuetify/lib/components/VCalendar/util/parser.js","mtime":499162500000},{"path":"/home/thiago/www/Pessoais/vueTest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/thiago/www/Pessoais/vueTest/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/home/thiago/www/Pessoais/vueTest/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _typeof from \"/home/thiago/www/Pessoais/vueTest/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport function parsedCategoryText(category, categoryText) {\n  return typeof categoryText === 'string' && _typeof(category) === 'object' && category ? category[categoryText] : typeof categoryText === 'function' ? categoryText(category) : category;\n}\nexport function getParsedCategories(categories, categoryText) {\n  if (typeof categories === 'string') return categories.split(/\\s*,\\s/);\n\n  if (Array.isArray(categories)) {\n    return categories.map(function (category) {\n      if (typeof category === 'string') return category;\n      var categoryName = typeof category.categoryName === 'string' ? category.categoryName : parsedCategoryText(category, categoryText);\n      return _objectSpread(_objectSpread({}, category), {}, {\n        categoryName: categoryName\n      });\n    });\n  }\n\n  return [];\n}",{"version":3,"sources":["../../../../src/components/VCalendar/util/parser.ts"],"names":[],"mappings":";;;;;;;;;;;AAEA,OAAM,SAAA,kBAAA,CAAA,QAAA,EAAA,YAAA,EAE+C;AAEnD,SAAO,OAAA,YAAA,KAAA,QAAA,IAAoC,QAAA,QAAA,MAApC,QAAA,IAAA,QAAA,GACH,QAAQ,CADL,YACK,CADL,GAEH,OAAA,YAAA,KAAA,UAAA,GACE,YAAY,CADd,QACc,CADd,GAFJ,QAAA;AAKD;AAED,OAAM,SAAA,mBAAA,CAAA,UAAA,EAAA,YAAA,EAE+C;AAEnD,MAAI,OAAA,UAAA,KAAJ,QAAA,EAAoC,OAAO,UAAU,CAAV,KAAA,CAAP,QAAO,CAAP;;AACpC,MAAI,KAAK,CAAL,OAAA,CAAJ,UAAI,CAAJ,EAA+B;AAC7B,WAAO,UAAU,CAAV,GAAA,CAAgB,UAAA,QAAD,EAA+B;AACnD,UAAI,OAAA,QAAA,KAAJ,QAAA,EAAkC,OAAA,QAAA;AAElC,UAAM,YAAY,GAAG,OAAO,QAAQ,CAAf,YAAA,KAAA,QAAA,GACjB,QAAQ,CADS,YAAA,GAEjB,kBAAkB,CAAA,QAAA,EAFtB,YAEsB,CAFtB;AAGA,6CAAO,QAAP;AAAsB,QAAA,YAAA,EAAA;AAAtB;AANF,KAAO,CAAP;AAQD;;AACD,SAAA,EAAA;AACD","sourcesContent":["import { CalendarCategory, CalendarCategoryTextFunction } from 'types'\n\nexport function parsedCategoryText (\n  category: CalendarCategory,\n  categoryText: string | CalendarCategoryTextFunction\n): string {\n  return typeof categoryText === 'string' && typeof category === 'object' && category\n    ? category[categoryText]\n    : typeof categoryText === 'function'\n      ? categoryText(category)\n      : category\n}\n\nexport function getParsedCategories (\n  categories: CalendarCategory | CalendarCategory[],\n  categoryText: string | CalendarCategoryTextFunction\n): CalendarCategory[] {\n  if (typeof categories === 'string') return categories.split(/\\s*,\\s/)\n  if (Array.isArray(categories)) {\n    return categories.map((category: CalendarCategory) => {\n      if (typeof category === 'string') return category\n\n      const categoryName = typeof category.categoryName === 'string'\n        ? category.categoryName\n        : parsedCategoryText(category, categoryText)\n      return { ...category, categoryName }\n    })\n  }\n  return []\n}\n"],"sourceRoot":""}]}