{"remainingRequest":"/home/thiago/www/Pessoais/vueTest/node_modules/babel-loader/lib/index.js!/home/thiago/www/Pessoais/vueTest/node_modules/eslint-loader/index.js??ref--13-0!/home/thiago/www/Pessoais/vueTest/src/api/db.js","dependencies":[{"path":"/home/thiago/www/Pessoais/vueTest/src/api/db.js","mtime":1633285799181},{"path":"/home/thiago/www/Pessoais/vueTest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/thiago/www/Pessoais/vueTest/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/thiago/www/Pessoais/vueTest/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/thiago/www/Pessoais/vueTest/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar DB_NAME = 'alunodb';\nvar DB_VERSION = 1;\nvar DB;\nexport default {\n  getDB: function () {\n    var _getDB = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n                if (DB) return resolve(DB);\n                var request = window.indexedDB.open(DB_NAME, DB_VERSION);\n\n                request.onerror = function (e) {\n                  console.log('Erro ao criar IndexedDB', e);\n                  reject('Error');\n                };\n\n                request.onsuccess = function (e) {\n                  DB = e.target.result;\n                  resolve(DB);\n                };\n\n                request.onupgradeneeded = function (e) {\n                  var db = e.target.result;\n                  db.createObjectStore(\"alunos\", {\n                    autoIncrement: true,\n                    keyPath: 'id'\n                  });\n                };\n              }));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function getDB() {\n      return _getDB.apply(this, arguments);\n    }\n\n    return getDB;\n  }(),\n  deleteAluno: function () {\n    var _deleteAluno = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(aluno) {\n      var db;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.getDB();\n\n            case 2:\n              db = _context2.sent;\n              return _context2.abrupt(\"return\", new Promise(function (resolve) {\n                var trans = db.transaction(['alunos'], 'readwrite');\n\n                trans.oncomplete = function () {\n                  resolve();\n                };\n\n                var store = trans.objectStore('alunos');\n                store.delete(aluno.id);\n              }));\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function deleteAluno(_x) {\n      return _deleteAluno.apply(this, arguments);\n    }\n\n    return deleteAluno;\n  }(),\n  getAlunos: function () {\n    var _getAlunos = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n      var db;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.getDB();\n\n            case 2:\n              db = _context3.sent;\n              return _context3.abrupt(\"return\", new Promise(function (resolve) {\n                var trans = db.transaction(['alunos'], 'readonly');\n\n                trans.oncomplete = function () {\n                  resolve(alunos);\n                };\n\n                var store = trans.objectStore('alunos');\n                var alunos = [];\n\n                store.openCursor().onsuccess = function (e) {\n                  var cursor = e.target.result;\n\n                  if (cursor) {\n                    alunos.push(cursor.value);\n                    cursor.continue();\n                  }\n                };\n              }));\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function getAlunos() {\n      return _getAlunos.apply(this, arguments);\n    }\n\n    return getAlunos;\n  }(),\n  saveAlunos: function () {\n    var _saveAlunos = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(aluno) {\n      var db;\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.getDB();\n\n            case 2:\n              db = _context4.sent;\n              return _context4.abrupt(\"return\", new Promise(function (resolve) {\n                var trans = db.transaction(['alunos'], 'readwrite');\n\n                trans.oncomplete = function () {\n                  resolve();\n                };\n\n                var store = trans.objectStore('alunos');\n                console.log(aluno);\n                store.put(aluno);\n              }));\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function saveAlunos(_x2) {\n      return _saveAlunos.apply(this, arguments);\n    }\n\n    return saveAlunos;\n  }()\n};",{"version":3,"sources":["/home/thiago/www/Pessoais/vueTest/src/api/db.js"],"names":["DB_NAME","DB_VERSION","DB","getDB","Promise","resolve","reject","request","window","indexedDB","open","onerror","e","console","log","onsuccess","target","result","onupgradeneeded","db","createObjectStore","autoIncrement","keyPath","deleteAluno","aluno","trans","transaction","oncomplete","store","objectStore","delete","id","getAlunos","alunos","openCursor","cursor","push","value","continue","saveAlunos","put"],"mappings":"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","sourcesContent":["const DB_NAME = 'alunodb';\r\nconst DB_VERSION = 1;\r\nlet DB;\r\n\r\nexport default {\r\n\r\n\tasync getDB() {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\r\n\t\t\tif(DB)return resolve(DB); \r\n\t\t\t\r\n\t\t\tlet request = window.indexedDB.open(DB_NAME, DB_VERSION);\r\n\t\t\t\r\n\t\t\trequest.onerror = e => {\r\n\t\t\t\tconsole.log('Erro ao criar IndexedDB', e)\r\n\t\t\t\treject('Error');\r\n\t\t\t};\r\n\t\r\n\t\t\trequest.onsuccess = e => {\r\n\t\t\t\tDB = e.target.result;\r\n\t\t\t\tresolve(DB);\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\trequest.onupgradeneeded = e => {\r\n\t\t\t\tlet db = e.target.result;\r\n\t\t\t\tdb.createObjectStore(\"alunos\", { autoIncrement: true, keyPath:'id' });\r\n\t\t\t};\r\n\t\t});\r\n\t},\r\n\tasync deleteAluno(aluno) {\r\n\r\n\t\tlet db = await this.getDB();\r\n\r\n\t\treturn new Promise(resolve => {\r\n\r\n\t\t\tlet trans = db.transaction(['alunos'],'readwrite');\r\n\t\t\ttrans.oncomplete = () => {\r\n\t\t\t\tresolve();\r\n\t\t\t};\r\n\r\n\t\t\tlet store = trans.objectStore('alunos');\r\n\t\t\tstore.delete(aluno.id);\r\n\t\t});\t\r\n\t},\r\n\tasync getAlunos() {\r\n\r\n\t\tlet db = await this.getDB();\r\n\r\n\t\treturn new Promise(resolve => {\r\n\r\n\t\t\tlet trans = db.transaction(['alunos'],'readonly');\r\n\t\t\ttrans.oncomplete = () => {\r\n\t\t\t\tresolve(alunos);\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tlet store = trans.objectStore('alunos');\r\n\t\t\tlet alunos = [];\r\n\t\t\t\r\n\t\t\tstore.openCursor().onsuccess = e => {\r\n\t\t\t\tlet cursor = e.target.result;\r\n\t\t\t\tif (cursor) {\r\n\t\t\t\t\talunos.push(cursor.value)\r\n\t\t\t\t\tcursor.continue();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t});\r\n\t},\r\n\r\n\tasync saveAlunos(aluno) {\r\n\r\n\t\tlet db = await this.getDB();\r\n\r\n\t\treturn new Promise(resolve => {\r\n\r\n\t\t\tlet trans = db.transaction(['alunos'],'readwrite');\r\n\t\t\ttrans.oncomplete = () => {\r\n\t\t\t\tresolve();\r\n\t\t\t};\r\n\r\n\t\t\tlet store = trans.objectStore('alunos');\r\n\t\t\tconsole.log(aluno);\r\n\t\t\tstore.put(aluno);\r\n\r\n\t\t});\r\n\t\t\r\n\t},\r\n}"]}]}